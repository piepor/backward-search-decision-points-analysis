import pm4py
from pm4py.objects.petri_net.obj import PetriNet
from pm4py.objects.petri_net.obj import Marking
from pm4py.objects.petri_net.utils import petri_utils
from pm4py.objects.petri_net.exporter import exporter as pnml_exporter
from pm4py.visualization.petri_net import visualizer as pn_visualizer

net = PetriNet()
# create empty petri net
net_name = "helpdesk_02"
net = PetriNet(net_name)

# create and add places
source = PetriNet.Place("source")
sink = PetriNet.Place("sink")
p_1 = PetriNet.Place("p_1")
p_2 = PetriNet.Place("p_2")
p_3 = PetriNet.Place("p_3")
p_4 = PetriNet.Place("p_4")
p_5 = PetriNet.Place("p_5")
p_6 = PetriNet.Place("p_6")
p_7 = PetriNet.Place("p_7")
p_8 = PetriNet.Place("p_8")
p_9 = PetriNet.Place("p_9")
p_10 = PetriNet.Place("p_10")
p_11 = PetriNet.Place("p_11")
p_12 = PetriNet.Place("p_12")
p_13 = PetriNet.Place("p_13")
p_14 = PetriNet.Place("p_14")
p_15 = PetriNet.Place("p_15")
p_16 = PetriNet.Place("p_16")
p_17 = PetriNet.Place("p_17")
net.places.add(source)
net.places.add(sink)
net.places.add(p_1)
net.places.add(p_2)
net.places.add(p_3)
net.places.add(p_4)
net.places.add(p_5)
net.places.add(p_6)
net.places.add(p_7)
net.places.add(p_8)
net.places.add(p_9)
net.places.add(p_10)
net.places.add(p_11)
net.places.add(p_10)
net.places.add(p_12)
net.places.add(p_13)
net.places.add(p_14)
net.places.add(p_15)
net.places.add(p_16)
net.places.add(p_17)

# create and add trasitions
t_A = PetriNet.Transition("trans_A", "Insert ticket")
skip_1 = PetriNet.Transition("skip_1", None)
t_B = PetriNet.Transition("trans_B", "Assign seriousness")
skip_2 = PetriNet.Transition("skip_2", None)
skip_3 = PetriNet.Transition("skip_3", None)
t_C = PetriNet.Transition("trans_C", "Create SW anomaly")
skip_4 = PetriNet.Transition("skip_4", None)
t_D = PetriNet.Transition("trans_D", "Resolve SW anomaly")
t_E = PetriNet.Transition("trans_E", "Require upgrade")
tauSplit_1 = PetriNet.Transition("tauSplit_1", None)
skip_5 = PetriNet.Transition("skip_5", None)
t_F = PetriNet.Transition("trans_F", "Wait")
t_G = PetriNet.Transition("trans_G", "Take in charge ticket")
tauJoin_1 = PetriNet.Transition("tauJoin_1", None)
t_H = PetriNet.Transition("trans_H", "DUPLICATE")
tauSplit_2 = PetriNet.Transition("tauSplit_2", None)
skip_6 = PetriNet.Transition("skip_6", None)
t_I = PetriNet.Transition("trans_I", "INVALID")
t_L = PetriNet.Transition("trans_L", "RESOLVED")
tauJoin_2 = PetriNet.Transition("tauJoin_2", None)
skip_7 = PetriNet.Transition("skip_7", None)
t_M = PetriNet.Transition("trans_M", "VERIFIED")
t_N = PetriNet.Transition("trans_N", "Resolve ticket")
t_O = PetriNet.Transition("trans_O", "Closed")

net.transitions.add(t_A)
net.transitions.add(t_B)
net.transitions.add(t_C)
net.transitions.add(t_D)
net.transitions.add(t_E)
net.transitions.add(t_F)
net.transitions.add(t_G)
net.transitions.add(t_H)
net.transitions.add(t_I)
net.transitions.add(t_L)
net.transitions.add(t_M)
net.transitions.add(t_N)
net.transitions.add(t_O)
net.transitions.add(skip_1)
net.transitions.add(skip_2)
net.transitions.add(skip_3)
net.transitions.add(skip_4)
net.transitions.add(skip_5)
net.transitions.add(skip_6)
net.transitions.add(skip_7)
net.transitions.add(tauSplit_1)
net.transitions.add(tauSplit_2)
net.transitions.add(tauJoin_1)
net.transitions.add(tauJoin_2)

# add arcs
petri_utils.add_arc_from_to(source, t_A, net)
petri_utils.add_arc_from_to(source, skip_1, net)
petri_utils.add_arc_from_to(t_A, p_1, net)
petri_utils.add_arc_from_to(skip_1, p_1, net)
petri_utils.add_arc_from_to(p_1, t_B, net)
petri_utils.add_arc_from_to(t_B, p_2, net)
petri_utils.add_arc_from_to(p_2, skip_2, net)
petri_utils.add_arc_from_to(p_2, t_C, net)
petri_utils.add_arc_from_to(p_2, skip_3, net)
petri_utils.add_arc_from_to(t_C, p_3, net)
petri_utils.add_arc_from_to(p_3, t_D, net)
petri_utils.add_arc_from_to(p_3, skip_4, net)
petri_utils.add_arc_from_to(t_D, p_4, net)
petri_utils.add_arc_from_to(skip_2, p_4, net)
petri_utils.add_arc_from_to(skip_4, p_4, net)
petri_utils.add_arc_from_to(p_4, t_E, net)
petri_utils.add_arc_from_to(t_E, p_5, net)
petri_utils.add_arc_from_to(skip_3, p_5, net)
petri_utils.add_arc_from_to(p_5, tauSplit_1, net)
petri_utils.add_arc_from_to(tauSplit_1, p_6, net)
petri_utils.add_arc_from_to(tauSplit_1, p_7, net)
petri_utils.add_arc_from_to(p_6, t_F, net)
petri_utils.add_arc_from_to(p_6, skip_5, net)
petri_utils.add_arc_from_to(t_F, p_8, net)
petri_utils.add_arc_from_to(skip_5, p_8, net)
petri_utils.add_arc_from_to(p_7, t_G, net)
petri_utils.add_arc_from_to(t_G, p_9, net)
petri_utils.add_arc_from_to(p_8, tauJoin_1, net)
petri_utils.add_arc_from_to(p_9, tauJoin_1, net)
petri_utils.add_arc_from_to(tauJoin_1, p_10, net)
petri_utils.add_arc_from_to(p_10, tauSplit_2, net)
petri_utils.add_arc_from_to(p_10, t_H, net)
petri_utils.add_arc_from_to(p_10, skip_6, net)
petri_utils.add_arc_from_to(tauSplit_2, p_11, net)
petri_utils.add_arc_from_to(tauSplit_2, p_12, net)
petri_utils.add_arc_from_to(p_11, t_I, net)
petri_utils.add_arc_from_to(p_12, t_L, net)
petri_utils.add_arc_from_to(t_I, p_13, net)
petri_utils.add_arc_from_to(t_L, p_14, net)
petri_utils.add_arc_from_to(p_13, tauJoin_2, net)
petri_utils.add_arc_from_to(p_14, tauJoin_2, net)
petri_utils.add_arc_from_to(tauJoin_2, p_15, net)
petri_utils.add_arc_from_to(t_H, p_15, net)
petri_utils.add_arc_from_to(skip_6, p_15, net)
petri_utils.add_arc_from_to(p_15, t_M, net)
petri_utils.add_arc_from_to(p_15, skip_7, net)
petri_utils.add_arc_from_to(t_M, p_16, net)
petri_utils.add_arc_from_to(skip_7, p_16, net)
petri_utils.add_arc_from_to(p_16, t_N, net)
petri_utils.add_arc_from_to(t_N, p_17, net)
petri_utils.add_arc_from_to(p_17, t_O, net)
petri_utils.add_arc_from_to(t_O, sink, net)

# initial and final marking
initial_marking = Marking()
initial_marking[source] = 1
final_marking = Marking()
final_marking[sink] = 1

#breakpoint()
pnml_exporter.apply(net, initial_marking, "models/{}.pnml".format(net_name), final_marking=final_marking)
gviz = pn_visualizer.apply(net, initial_marking, final_marking)
pn_visualizer.view(gviz)
pn_visualizer.save(gviz, "{}.svg".format(net_name))
